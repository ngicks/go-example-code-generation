// Code generated by me. DO NOT EDIT.
package main

import (
	"bytes"
	"crypto"
	"crypto/rand"
	_ "crypto/sha256"
	_ "crypto/sha512"
	"encoding/hex"
	. "fmt"
	"io"
	rand_0 "math/rand/v2"
	"sync"
)

var bufPool = &sync.Pool{
	New: func() any {
		return new(bytes.Buffer)
	},
}

func getBuf() *bytes.Buffer {
	return bufPool.Get().(*bytes.Buffer)
}

func putBuf(b *bytes.Buffer) {
	if b == nil || b.Cap() > 64<<10 {
		return
	}
	b.Reset()
	bufPool.Put(b)
}

func main() {
	randBuf := getBuf()
	defer putBuf(randBuf)

	var err error

	_, err = io.CopyN(randBuf, rand.Reader, 16)
	if err != nil {
		panic(err)
	}
	for i := 0; i < 16; i++ {
		_ = randBuf.WriteByte(rand_0.N(byte(255)))
	}

	_, _ = Printf("rand bytes=%q\n", hex.EncodeToString(randBuf.Bytes()))

	h := crypto.SHA256.New()
	_, err = io.Copy(h, bytes.NewReader(randBuf.Bytes()))
	if err != nil {
		panic(err)
	}
	_, _ = Printf("sha256sum=%q\n", hex.EncodeToString(h.Sum(nil)))

	h = crypto.SHA512.New()
	_, err = io.Copy(h, bytes.NewReader(randBuf.Bytes()))
	if err != nil {
		panic(err)
	}
	_, _ = Printf("sha512sum=%q\n", hex.EncodeToString(h.Sum(nil)))
}
